generator client { 
  provider = "prisma-client-js"
   binaryTargets = ["native", "debian-openssl-1.1.x"] 
}

datasource db { 
  provider = "postgresql" 
  url      = env("DATABASE_URL") 
}

model User { 
  id            String           @id @default(cuid()) 
  name          String 
  email         String           @unique 
  projectRoles  ProjectRole[]    
  assignedTasks TaskAssignment[] 
  createdTasks  Task[]           @relation("CreatedTasks") 
  uploadedFiles File[]           @relation("UploadedFiles") 
  comments      Comment[] 
  activities    Activity[] 

  @@map("users") 
}

model Project { 
  id             String           @id @default(cuid()) 
  title          String 
  description    String 
  expectedBudget Float
  realBudget     Float
  usedBudget     Float
  startDate      DateTime
  endDate        DateTime
  projectRoles   ProjectRole[]    
  tasks          Task[]           @relation("ProjectTasks") 
  files          File[]           @relation("ProjectFiles") 
  
  @@map("projects") 
}

model ProjectRole { 
  id         String   @id @default(cuid()) 
  role       Role 
  userId     String 
  projectId  String 

  user       User     @relation(fields: [userId], references: [id]) 
  project    Project  @relation(fields: [projectId], references: [id]) 

  @@unique([userId, projectId, role]) 
  @@map("project_roles") 
}

model Task { 
  id             String       @id @default(cuid()) 
  title          String 
  description    String 
  status         TaskStatus 
  projectId      String       
  project        Project      @relation("ProjectTasks", fields: [projectId], references: [id]) 
  subTasks       Task[]       @relation("SubTasks") 
  parentTask     Task?        @relation("SubTasks", fields: [parentTaskId], references: [id]) 
  parentTaskId   String? 
  expectedBudget Float 
  realBudget     Float 
  usedBudget     Float
  startDate      DateTime?
  endDate        DateTime?
  assignedUsers  TaskAssignment[] 
  createdById    String? 
  createdBy      User?        @relation("CreatedTasks", fields: [createdById], references: [id]) 
  comments       Comment[] 
  activities     Activity[] 
  files          File[]       @relation("TaskFiles") 

  @@map("tasks") 
  TaskTag TaskTag[]
}

model TaskAssignment { 
  id        String @id @default(cuid()) 
  taskId    String 
  userId    String 

  task      Task   @relation(fields: [taskId], references: [id]) 
  user      User   @relation(fields: [userId], references: [id]) 

  @@unique([taskId, userId])
  @@map("task_assignments") 
}

model Tag { 
  id     String  @id @default(cuid()) 
  name   String  @unique 

  @@map("tags") 
  TaskTag TaskTag[]
}

model Comment { 
  id        String    @id @default(cuid()) 
  content   String 
  taskId    String 
  authorId  String 
  createdAt DateTime  @default(now()) 

  task      Task   @relation(fields: [taskId], references: [id]) 
  author    User   @relation(fields: [authorId], references: [id]) 

  @@map("comments") 
}

model Activity { 
  id        String      @id @default(cuid()) 
  action    ActivityAction 
  detail    String?
  taskId    String? 
  userId    String 
  createdAt DateTime     @default(now()) 

  task      Task?       @relation(fields: [taskId], references: [id]) 
  user      User        @relation(fields: [userId], references: [id]) 

  @@map("activities") 
}

model File { 
  id         String  @id @default(cuid()) 
  filePath   String 
  fileSize   Float   
  taskId     String? 
  projectId  String? 
  uploadedBy String 
  uploadedAt DateTime  @default(now()) 
  createdAt  DateTime  @default(now()) 

  task       Task?    @relation("TaskFiles", fields: [taskId], references: [id]) 
  project    Project? @relation("ProjectFiles", fields: [projectId], references: [id]) 
  uploader   User     @relation("UploadedFiles", fields: [uploadedBy], references: [id]) 

  @@map("files") 
}

// New join table for the many-to-many relationship between Task and Tag
model TaskTag { 
  id       String @id @default(cuid()) 
  taskId   String 
  tagId    String 

  task     Task   @relation(fields: [taskId], references: [id]) 
  tag      Tag    @relation(fields: [tagId], references: [id]) 

  @@unique([taskId, tagId])
  @@map("task_tags") 
}

enum Role { 
  Admin 
  Director 
  ProjectOwner 
  Member 
}

enum TaskStatus {
  Unassigned 
  Assigned 
  UnderReview 
  InRecheck 
  Done 
}

enum ActivityAction { 
  CREATE 
  ASSIGNED 
  DELETE 
  UPLOAD 
}
